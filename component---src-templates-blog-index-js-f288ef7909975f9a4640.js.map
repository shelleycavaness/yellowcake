{"version":3,"file":"component---src-templates-blog-index-js-f288ef7909975f9a4640.js","mappings":"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","sources":["webpack://yellowcake/./src/components/PostCard.js","webpack://yellowcake/./src/components/PostSection.js","webpack://yellowcake/./src/components/BlogSearch.js","webpack://yellowcake/./src/components/PostCategoriesNav.js","webpack://yellowcake/./src/templates/BlogIndex.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Image from './Image'\nimport './PostCard.css'\n\nconst PostCard = ({\n  featuredImage,\n  title,\n  excerpt,\n  slug,\n  categories = [],\n  className = '',\n  ...props\n}) => (\n  <Link to={slug} className={`PostCard ${className}`}>\n    {featuredImage && (\n      <div className=\"PostCard--Image relative\">\n        <Image background src={featuredImage} alt={title} />\n      </div>\n    )}\n    <div className=\"PostCard--Content\">\n      {title && <h3 className=\"PostCard--Title\">{title}</h3>}\n      <div className=\"PostCard--Category\">\n        {categories && categories.map(cat => cat.category).join(', ')}\n      </div>\n      {excerpt && <div className=\"PostCard--Excerpt\">{excerpt}</div>}\n    </div>\n  </Link>\n)\n\nexport default PostCard\n","import React from 'react'\n\nimport PostCard from '../components/PostCard'\nimport './PostSection.css'\n\nclass PostSection extends React.Component {\n  static defaultProps = {\n    posts: [],\n    title: '',\n    limit: 12,\n    showLoadMore: true,\n    loadMoreTitle: 'Load More',\n    perPageLimit: 12\n  }\n\n  state = {\n    limit: this.props.limit\n  }\n\n  increaseLimit = () =>\n    this.setState(prevState => ({\n      limit: prevState.limit + this.props.perPageLimit\n    }))\n\n  render() {\n    const { posts, title, showLoadMore, loadMoreTitle } = this.props,\n      { limit } = this.state,\n      visiblePosts = posts.slice(0, limit || posts.length)\n\n    return (\n      <div className=\"PostSection\">\n        {title && <h2 className=\"PostSection--Title\">{title}</h2>}\n        {!!visiblePosts.length && (\n          <div className=\"PostSection--Grid\">\n            {visiblePosts.map((post, index) => (\n              <PostCard key={post.title + index} {...post} />\n            ))}\n          </div>\n        )}\n        {showLoadMore && visiblePosts.length < posts.length && (\n          <div className=\"taCenter\">\n            <button className=\"button\" onClick={this.increaseLimit}>\n              {loadMoreTitle}\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default PostSection\n","import React from 'react'\nimport { navigate } from 'gatsby'\nimport { Location } from '@reach/router'\nimport qs from 'qs'\n\nexport default ({ pageCount }) => {\n  return (\n    <Location>\n      {({ location }) => {\n        let search = qs.parse(location.search.replace('?', ''))\n\n        return (\n          <input\n            type=\"text\"\n            value={search.s || ''}\n            placeholder=\"Search...\"\n            onChange={e => {\n              let search = {}\n              search.s = e.target.value\n              search = qs.stringify(search)\n\n              const url = location.href\n                .replace(location.origin, '')\n                .replace(location.search, '')\n\n              navigate(`${url}?${search}`)\n            }}\n          />\n        )\n      }}\n    </Location>\n  )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport BlogSearch from './BlogSearch'\nimport './PostCategoriesNav.css'\n\nconst PostCategoriesNav = ({ categories, enableSearch }) => (\n  <div className=\"PostCategoriesNav\">\n    <Link className=\"NavLink\" exact=\"true\" to={`/blog/`}>\n      All\n    </Link>\n    {categories.map((category, index) => (\n      <Link\n        exact=\"true\"\n        className=\"NavLink\"\n        key={category.title + index}\n        to={category.slug}\n      >\n        {category.title}\n      </Link>\n    ))}\n\n    {enableSearch && <BlogSearch />}\n  </div>\n)\n\nexport default PostCategoriesNav\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Location } from '@reach/router'\nimport qs from 'qs'\n\nimport PageHeader from '../components/PageHeader'\nimport PostSection from '../components/PostSection'\nimport PostCategoriesNav from '../components/PostCategoriesNav'\nimport Layout from '../components/Layout'\n\n/**\n * Filter posts by date. Feature dates will be fitered\n * When used, make sure you run a cronejob each day to show schaduled content. See docs\n *\n * @param {posts} object\n */\nexport const byDate = posts => {\n  const now = Date.now()\n  return posts.filter(post => Date.parse(post.date) <= now)\n}\n\n/**\n * filter posts by category.\n *\n * @param {posts} object\n * @param {title} string\n * @param {contentType} string\n */\nexport const byCategory = (posts, title, contentType) => {\n  const isCategory = contentType === 'postCategories'\n  const byCategory = post =>\n    post.categories &&\n    post.categories.filter(cat => cat.category === title).length\n  return isCategory ? posts.filter(byCategory) : posts\n}\n\n// Export Template for use in CMS preview\nexport const BlogIndexTemplate = ({\n  title,\n  subtitle,\n  featuredImage,\n  posts = [],\n  postCategories = [],\n  enableSearch = true,\n  contentType\n}) => (\n  <Location>\n    {({ location }) => {\n      let filteredPosts =\n        posts && !!posts.length\n          ? byCategory(byDate(posts), title, contentType)\n          : []\n\n      let queryObj = location.search.replace('?', '')\n      queryObj = qs.parse(queryObj)\n\n      if (enableSearch && queryObj.s) {\n        const searchTerm = queryObj.s.toLowerCase()\n        filteredPosts = filteredPosts.filter(post =>\n          post.frontmatter.title.toLowerCase().includes(searchTerm)\n        )\n      }\n\n      return (\n        <main className=\"Blog\">\n          <PageHeader\n            title={title}\n            subtitle={subtitle}\n            backgroundImage={featuredImage}\n          />\n\n          {!!postCategories.length && (\n            <section className=\"section thin\">\n              <div className=\"container\">\n                <PostCategoriesNav enableSearch categories={postCategories} />\n              </div>\n            </section>\n          )}\n\n          {!!posts.length && (\n            <section className=\"section\">\n              <div className=\"container\">\n                <PostSection posts={filteredPosts} />\n              </div>\n            </section>\n          )}\n        </main>\n      )\n    }}\n  </Location>\n)\n\n// Export Default BlogIndex for front-end\nconst BlogIndex = ({ data: { page, posts, postCategories } }) => (\n  <Layout\n    meta={page.frontmatter.meta || false}\n    title={page.frontmatter.title || false}\n  >\n    <BlogIndexTemplate\n      {...page}\n      {...page.fields}\n      {...page.frontmatter}\n      posts={posts.edges.map(post => ({\n        ...post.node,\n        ...post.node.frontmatter,\n        ...post.node.fields\n      }))}\n      postCategories={postCategories.edges.map(post => ({\n        ...post.node,\n        ...post.node.frontmatter,\n        ...post.node.fields\n      }))}\n    />\n  </Layout>\n)\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  ## Query for BlogIndex data\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\n  ## $id is processed via gatsby-node.js\n  ## query name must be unique to this file\n  query BlogIndex($id: String!) {\n    page: markdownRemark(id: { eq: $id }) {\n      ...Meta\n      fields {\n        contentType\n      }\n      frontmatter {\n        title\n        excerpt\n        template\n        subtitle\n        featuredImage\n      }\n    }\n\n    posts: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"posts\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n            categories {\n              category\n            }\n            featuredImage\n          }\n        }\n      }\n    }\n    postCategories: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"postCategories\" } } }\n      sort: { order: ASC, fields: [frontmatter___title] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","featuredImage","title","excerpt","slug","categories","className","props","React","Link","to","Image","background","src","alt","map","cat","category","join","PostSection","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","state","limit","increaseLimit","setState","prevState","perPageLimit","_inheritsLoose","prototype","render","posts","showLoadMore","loadMoreTitle","this","visiblePosts","slice","post","index","PostCard","Object","assign","key","onClick","defaultProps","pageCount","Location","_ref2","location","search","qs","replace","type","value","s","placeholder","onChange","e","target","url","href","origin","navigate","enableSearch","exact","BlogSearch","byDate","now","Date","filter","parse","date","byCategory","contentType","BlogIndexTemplate","subtitle","postCategories","filteredPosts","queryObj","searchTerm","toLowerCase","frontmatter","includes","PageHeader","backgroundImage","PostCategoriesNav","_ref3","data","page","Layout","meta","fields","edges","node"],"sourceRoot":""}