{"version":3,"file":"component---src-templates-single-post-js-497cb731b628eacbb2a4.js","mappings":"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","sources":["webpack://yellowcake/./node_modules/react-feather/dist/icons/chevron-left.js","webpack://yellowcake/./src/templates/SinglePost.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar ChevronLeft = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"15 18 9 12 15 6\"\n  }));\n});\nChevronLeft.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nChevronLeft.displayName = 'ChevronLeft';\nexport default ChevronLeft;","import React, { Fragment } from 'react'\nimport _get from 'lodash/get'\nimport { Link, graphql } from 'gatsby'\nimport { ChevronLeft } from 'react-feather'\n\nimport Content from '../components/Content'\nimport Layout from '../components/Layout'\nimport './SinglePost.css'\n\nexport const SinglePostTemplate = ({\n  title,\n  date,\n  body,\n  nextPostURL,\n  prevPostURL,\n  categories = [],\n}) => (\n  <main>\n    <article\n      className=\"SinglePost section light\"\n      itemScope\n      itemType=\"http://schema.org/BlogPosting\"\n    >\n      <div className=\"container skinny\">\n        <Link className=\"SinglePost--BackButton\" to=\"/blog/\">\n          <ChevronLeft /> BACK\n        </Link>\n        <div className=\"SinglePost--Content relative\">\n          <div className=\"SinglePost--Meta\">\n            {date && (\n              <time\n                className=\"SinglePost--Meta--Date\"\n                itemProp=\"dateCreated pubdate datePublished\"\n                date={date}\n              >\n                {date}\n              </time>\n            )}\n            {categories && (\n              <Fragment>\n                <span>|</span>\n                {categories.map((cat, index) => (\n                  <span\n                    key={cat.category}\n                    className=\"SinglePost--Meta--Category\"\n                  >\n                    {cat.category}\n                    {/* Add a comma on all but last category */}\n                    {index !== categories.length - 1 ? ',' : ''}\n                  </span>\n                ))}\n              </Fragment>\n            )}\n          </div>\n\n          {title && (\n            <h1 className=\"SinglePost--Title\" itemProp=\"title\">\n              {title}\n            </h1>\n          )}\n\n          <div className=\"SinglePost--InnerContent\">\n            <Content source={body} />\n          </div>\n\n          <div className=\"SinglePost--Pagination\">\n            {prevPostURL && (\n              <Link\n                className=\"SinglePost--Pagination--Link prev\"\n                to={prevPostURL}\n              >\n                Previous Post\n              </Link>\n            )}\n            {nextPostURL && (\n              <Link\n                className=\"SinglePost--Pagination--Link next\"\n                to={nextPostURL}\n              >\n                Next Post\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </article>\n  </main>\n)\n\n// Export Default SinglePost for front-end\nconst SinglePost = ({ data: { post, allPosts } }) => {\n  const thisEdge = allPosts.edges.find(edge => edge.node.id === post.id)\n  return (\n    <Layout\n      meta={post.frontmatter.meta || false}\n      title={post.frontmatter.title || false}\n    >\n      <SinglePostTemplate\n        {...post}\n        {...post.frontmatter}\n        body={post.html}\n        nextPostURL={_get(thisEdge, 'next.fields.slug')}\n        prevPostURL={_get(thisEdge, 'previous.fields.slug')}\n      />\n    </Layout>\n  )\n}\n\nexport default SinglePost\n\nexport const pageQuery = graphql`\n  ## Query for SinglePost data\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\n  ## $id is processed via gatsby-node.js\n  ## query name must be unique to this file\n  query SinglePost($id: String!) {\n    post: markdownRemark(id: { eq: $id }) {\n      ...Meta\n      html\n      id\n      frontmatter {\n        title\n        template\n        subtitle\n        date(formatString: \"MMMM Do, YYYY\")\n        categories {\n          category\n        }\n      }\n    }\n\n    allPosts: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"posts\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n        }\n        next {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n        previous {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","ChevronLeft","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","propTypes","displayName","SinglePostTemplate","title","date","body","nextPostURL","prevPostURL","categories","React","className","itemScope","itemType","Link","to","itemProp","Fragment","map","cat","index","category","Content","_ref2","data","post","allPosts","thisEdge","edges","find","edge","node","id","Layout","meta","frontmatter","html","_get"],"sourceRoot":""}